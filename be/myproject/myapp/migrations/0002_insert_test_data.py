# Generated by Django 5.0.6 on 2024-07-12 16:23
import random

from django.contrib.auth.hashers import make_password
from django.db import migrations, models
from django.utils import timezone

random_first_names = [
    "James",
    "John",
    "Robert",
    "Michael",
    "William",
    "David",
    "Richard",
    "Joseph",
    "Thomas",
]

random_last_names = [
    "Smith",
    "Johnson",
    "Williams",
    "Jones",
    "Brown",
    "Davis",
    "Miller",
    "Wilson",
]

random_adjectives = [
    "Happy",
    "Sad",
    "Angry",
    "Excited",
    "Tired",
    "Sleepy",
    "Hungry",
    "Thirsty",
    "Bored",
    "Annoyed",
]
random_group_nouns = [
    "Cats",
    "Dogs",
    "Birds",
    "Fish",
    "Lions",
    "Tigers",
    "Bears",
    "Elephants",
    "Monkeys",
    "Pandas",
]

random.seed(42)


def add_roles(apps, schema_editor):
    User = apps.get_model("myapp", "User")
    stu = User.objects.create(
        FirstName="stu",
        LastName="stu",
        EmailAddress="stu@stu.com",
        Passwd=make_password("stu"),
        UserRole=1,
        UserInformation="",
    )
    stu.save()
    cord = User.objects.create(
        FirstName="cord",
        LastName="cord",
        EmailAddress="cord@cord.com",
        Passwd=make_password("cord"),
        UserRole=4,
        UserInformation="",
    )
    cord.save()
    cli = User.objects.create(
        FirstName="cli",
        LastName="cli",
        EmailAddress="cli@cli.com",
        Passwd=make_password("cli"),
        UserRole=2,
        UserInformation="",
    )
    cli.save()
    admin = User.objects.create(
        FirstName="admin",
        LastName="admin",
        EmailAddress="admin@admin.com",
        Passwd=make_password("admin"),
        UserRole=5,
        UserInformation="",
    )
    admin.save()
    tut = User.objects.create(
        FirstName="tut",
        LastName="tut",
        EmailAddress="tut@tut.com",
        Passwd=make_password("tut"),
        UserRole=3,
        UserInformation="",
    )
    tut.save()

    print("=====================================")
    print("admin created")
    print("tut created")
    print("stu created")
    print("cord created")
    print("cli created")


def add_areas(apps, schema_editor):
    areas = [
        "Programming Languages",
        "Machine Learning & AI",
        "Web Development",
        "Frameworks & Libraries",
        "Database Management",
        "Mobile App Development",
        "Data Processing & Visualization",
        "Security & Privacy",
        "DevOps & CI/CD",
        "UI/UX Design",
        "Cloud Platforms",
        "Miscellaneous",
    ]
    Area = apps.get_model("myapp", "Area")
    for area in areas:
        Area.objects.create(AreaName=area)
    print("=====================================")
    print("Areas created")


def add_course_code(apps, schema_editor):
    course = [
        "COMP9900",
        "COMP3900",
    ]
    CourseCode = apps.get_model("myapp", "CourseCode")
    for c in course:
        CourseCode.objects.create(CourseName=c)
    print("=====================================")
    print("CourseCode created")


def create_test_users(apps, schema_editor):
    User = apps.get_model("myapp", "User")
    CourseCode = apps.get_model("myapp", "CourseCode")
    # Create additional students
    user_ls = []
    course_ls = list(CourseCode.objects.all())
    for i in range(100):
        email = f"stu{i}@stu.com"
        password = make_password("stu")
        first_name = random.choice(random_first_names)
        last_name = random.choice(random_last_names) + str(i)
        user_ls.append(
            User(
                FirstName=first_name,
                LastName=last_name,
                EmailAddress=email,
                Passwd=password,
                UserRole=1,
                UserInformation=f"Information for {first_name} {last_name}",
                CourseCode=course_ls[i % 2],
            )
        )
    User.objects.bulk_create(user_ls)
    # Create additional clients
    user_ls = []
    for i in range(10):
        email = f"cli{i}@cli.com"
        password = make_password("cli")
        user_ls.append(
            User(
                FirstName=f"cli{i}",
                LastName=f"cli{i}",
                EmailAddress=email,
                Passwd=password,
                UserRole=2,
                UserInformation=f"Information for cli{i}",
            )
        )
    User.objects.bulk_create(user_ls)

    print("Test users created successfully.")


def add_projects(apps, schema_editor):
    Project = apps.get_model("myapp", "Project")
    User = apps.get_model("myapp", "User")
    random.seed(42)
    users = list(User.objects.filter(UserRole=2))
    Project.objects.bulk_create(
        [
            Project(
                ProjectName=f"Project {i}",
                ProjectDescription=f"Description for Project {i}",
                ProjectOwner=user.EmailAddress,
                CreatedBy=user,
                MaxNumOfGroup=random.randint(6, 10),
            )
            for i, user in enumerate(users)
        ]
    )
    print("Test projects created successfully.")


def add_groups(apps, schema_editor):
    User = apps.get_model("myapp", "User")
    Group = apps.get_model("myapp", "Group")
    CourseCode = apps.get_model("myapp", "CourseCode")

    cord = User.objects.get(EmailAddress="cord@cord.com")
    admin = User.objects.get(EmailAddress="admin@admin.com")
    tut = User.objects.get(EmailAddress="tut@tut.com")

    # Creating groups

    course = CourseCode.objects.get(CourseName="COMP9900")

    group1 = Group.objects.create(
        GroupName="Cord Created Group",
        GroupDescription="This is a group created by cord",
        CreatedBy=cord,
        MaxMemberNumber=6,
        CourseCode=course,
    )
    group2 = Group.objects.create(
        GroupName="Admin Created Group",
        GroupDescription="This is a group created by admin",
        CreatedBy=admin,
        MaxMemberNumber=6,
        CourseCode=course,
    )
    group3 = Group.objects.create(
        GroupName="Tutor Created Group",
        GroupDescription="This is a group created by tut",
        CreatedBy=tut,
        MaxMemberNumber=6,
        CourseCode=course,
    )

    group1.save()
    group2.save()
    group3.save()

    # create 10 more groups
    users9900 = User.objects.filter(UserRole=1, CourseCode__CourseName="COMP9900")
    users3900 = User.objects.filter(UserRole=1, CourseCode__CourseName="COMP3900")
    list = [users9900, users3900]
    for i in range(50):
        group_adj = random.choice(random_adjectives)
        group_noun = random.choice(random_group_nouns)
        group_name = f"{group_adj} {group_noun} {i+4}"
        user = list[i % 2][i]
        if not user:
            break
        group = Group.objects.create(
            GroupName=group_name,
            GroupDescription=f"Description for {group_name}",
            CreatedBy=user,
            MaxMemberNumber=random.randint(5, 7),
            CourseCode=user.CourseCode,
        )
        group.save()
    print("Groups created successfully.")


def assign_users_to_groups(apps, schema_editor):

    User = apps.get_model("myapp", "User")
    Group = apps.get_model("myapp", "Group")
    GroupUsersLink = apps.get_model("myapp", "GroupUsersLink")

    def assign_users_to_course(course_name):
        users = list(
            User.objects.filter(UserRole=1, CourseCode__CourseName=course_name)
        )
        existing_groups = list(Group.objects.filter(CourseCode__CourseName=course_name))

        while users and existing_groups:
            for user in users[:]:  # 使用切片副本来安全地修改列表
                if not existing_groups:
                    break
                group = random.choice(existing_groups)
                if group.GroupMembers.count() >= group.MaxMemberNumber:
                    existing_groups.remove(group)
                    continue

                GroupUsersLink.objects.create(UserID=user, GroupID=group)
                users.remove(user)
                if group.GroupMembers.count() >= group.MaxMemberNumber:
                    existing_groups.remove(group)

    assign_users_to_course("COMP9900")
    assign_users_to_course("COMP3900")

    print("Assignment done")


def add_group_preferences(apps, schema_editor):
    Group = apps.get_model("myapp", "Group")
    Project = apps.get_model("myapp", "Project")
    GroupPreference = apps.get_model("myapp", "GroupPreference")
    random.seed(42)
    projects = Project.objects.all()
    print(projects)
    groups = Group.objects.annotate(num_members=models.Count("groupuserslink")).filter(
        num_members__gt=0
    )

    for group in groups:

        for i in range(3):
            if projects.count() == 0:
                break
            project = random.choice(projects)
            GroupPreference.objects.create(Preference=project, Group=group, Rank=i + 1)
            projects = projects.exclude(ProjectID=project.ProjectID)
    print("Group preferences added")


def assign_group_to_projects(apps, schema_editor):

    Project = apps.get_model("myapp", "Project")
    Group = apps.get_model("myapp", "Group")
    GroupProjectsLink = apps.get_model("myapp", "GroupProjectsLink")
    groups = Group.objects.annotate(num_members=models.Count("groupuserslink")).filter(
        num_members__gt=0
    )
    existing_projects = list(Project.objects.all())

    for project in existing_projects:
        if groups.count() == 0:
            break
        group = random.choice(groups)
        if not GroupProjectsLink.objects.filter(
            GroupID=group, ProjectID=project
        ).exists():
            GroupProjectsLink.objects.create(GroupID=group, ProjectID=project)
        groups = groups.exclude(GroupID=group.GroupID)
    print("Groups assigned to projects")


def add_time_rule(apps, schema_editor):
    timerule = [
        "Test All Due",
        "Test All Active",
        "Test Only Group Formation Due",
    ]
    TimeRule = apps.get_model("myapp", "TimeRule")
    for t in timerule:
        if t == "Test All Active":
            projectDeadline = timezone.now() + timezone.timedelta(days=300)
            groupFreezeTime = timezone.now() + timezone.timedelta(days=300)
            TimeRule.objects.create(
                RuleName=t,
                ProjectDeadline=projectDeadline,
                GroupFreezeTime=groupFreezeTime,
                IsActive=True,
            )

        if t == "Test All Due":
            projectDeadline = timezone.now() - timezone.timedelta(days=300)
            groupFreezeTime = timezone.now() - timezone.timedelta(days=300)
            TimeRule.objects.create(
                RuleName=t,
                ProjectDeadline=projectDeadline,
                GroupFreezeTime=groupFreezeTime,
                IsActive=False,
            )
        if t == "Test Only Group Formation Due":
            projectDeadline = timezone.now() + timezone.timedelta(days=300)
            groupFreezeTime = timezone.now() - timezone.timedelta(days=300)
            TimeRule.objects.create(
                RuleName=t,
                ProjectDeadline=projectDeadline,
                GroupFreezeTime=groupFreezeTime,
                IsActive=False,
            )

    print("=====================================")
    print("TimeRule created")


def add_group_score(apps, schema_editor):
    User = apps.get_model("myapp", "User")
    GroupScore = apps.get_model("myapp", "GroupScore")
    Group = apps.get_model("myapp", "Group")

    cord = User.objects.get(EmailAddress="cord@cord.com")
    admin = User.objects.get(EmailAddress="admin@admin.com")
    tut = User.objects.get(EmailAddress="tut@tut.com")
    users = [cord, admin, tut]
    # for g_obj in Group.objects.all():
    #     for user in users:
    #         score = float(random.randint(0, 100))
    #         if score == 0:
    #             feedback = "C"
    #         elif score <= 30:
    #             feedback = "D"
    #         elif score <= 60:
    #             feedback = "B"
    #         elif score <= 99:
    #             feedback = "A"
    #         else:
    #             feedback = "S"
    #         GroupScore.objects.create(
    #             markers_id=user.UserID,
    #             group_id=g_obj.GroupID,
    #             score=score,
    #             feedback=feedback,
    #         )


def add_skills(apps, schema_editor):

    Area = apps.get_model("myapp", "Area")
    areas = Area.objects.all()

    Skill = apps.get_model("myapp", "Skill")

    for area in areas:

        if area.AreaName == "Programming Languages":
            skills = [
                "Java",
                "Python",
                "C",
                "C++",
                "C#",
                "JavaScript",
                "Ruby",
                "PHP",
                "Swift",
                "Kotlin",
            ]
            for skill in skills:
                Skill.objects.create(SkillName=skill, Area=area)
        if area.AreaName == "Machine Learning & AI":
            skills = [
                "TensorFlow",
                "PyTorch",
                "Scikit-learn",
                "Keras",
                "Theano",
                "Caffe",
                "Torch",
                "MLlib",
            ]
            for skill in skills:
                Skill.objects.create(SkillName=skill, Area=area)
        if area.AreaName == "Web Development":
            skills = [
                "HTML",
                "CSS",
                "JavaScript",
                "React",
                "Vue",
                "Angular",
                "jQuery",
                "Bootstrap",
                "Sass",
                "Less",
            ]
            for skill in skills:
                Skill.objects.create(SkillName=skill, Area=area)
        if area.AreaName == "Frameworks & Libraries":
            skills = [
                "Django",
                "Flask",
                "Spring",
                "Express",
                "Ruby on Rails",
                "Laravel",
                "ASP.NET",
                "Hibernate",
                "MyBatis",
                "JPA",
            ]
            for skill in skills:
                Skill.objects.create(SkillName=skill, Area=area)
        if area.AreaName == "Database Management":
            skills = [
                "MySQL",
                "PostgreSQL",
                "SQLite",
                "Oracle",
                "SQL Server",
                "MongoDB",
                "Redis",
                "Cassandra",
                "HBase",
                "Neo4j",
            ]
            for skill in skills:
                Skill.objects.create(SkillName=skill, Area=area)
        if area.AreaName == "Mobile App Development":
            skills = [
                "Android",
                "iOS",
                "React Native",
                "Flutter",
                "Xamarin",
                "PhoneGap",
                "Ionic",
                "Cordova",
                "Appcelerator",
                "Sencha Touch",
            ]
            for skill in skills:
                Skill.objects.create(SkillName=skill, Area=area)
        if area.AreaName == "Data Processing & Visualization":
            skills = [
                "Pandas",
                "Numpy",
                "Matplotlib",
                "Seaborn",
                "Bokeh",
                "Plotly",
                "D3.js",
                "Tableau",
                "Power BI",
                "QlikView",
            ]
            for skill in skills:
                Skill.objects.create(SkillName=skill, Area=area)
        if area.AreaName == "Security & Privacy":
            skills = [
                "Cryptography",
                "Firewall",
                "VPN",
                "IDS",
                "IPS",
                "PKI",
                "SSL",
                "TLS",
                "OAuth",
                "OpenID",
            ]
            for skill in skills:
                Skill.objects.create(SkillName=skill, Area=area)
        if area.AreaName == "DevOps & CI/CD":
            skills = [
                "Jenkins",
                "Travis CI",
                "Circle CI",
                "GitLab CI",
                "GitHub Actions",
                "Docker",
                "Kubernetes",
                "Ansible",
                "Puppet",
                "Chef",
            ]
            for skill in skills:
                Skill.objects.create(SkillName=skill, Area=area)
        if area.AreaName == "UI/UX Design":
            skills = [
                "Sketch",
                "Figma",
                "Adobe XD",
                "InVision",
                "Axure RP",
                "Balsamiq",
                "Zeplin",
                "Marvel",
                "Principle",
                "Framer",
            ]
            for skill in skills:
                Skill.objects.create(SkillName=skill, Area=area)
        if area.AreaName == "Cloud Platforms":
            skills = [
                "AWS",
                "Azure",
                "Google Cloud",
                "Alibaba Cloud",
                "IBM Cloud",
                "Oracle Cloud",
                "Salesforce",
                "SAP",
                "VMware",
                "Red Hat",
            ]
            for skill in skills:
                Skill.objects.create(SkillName=skill, Area=area)
        if area.AreaName == "Miscellaneous":
            skills = [
                "Git",
                "Linux",
                "Windows",
                "MacOS",
                "Shell",
                "Vim",
                "Emacs",
                "VS Code",
                "Sublime Text",
                "Atom",
            ]
            for skill in skills:
                Skill.objects.create(SkillName=skill, Area=area)


def set_skills_to_projects(apps, schema_editor):
    Project = apps.get_model("myapp", "Project")
    Skill = apps.get_model("myapp", "Skill")
    ProjectSkillsLink = apps.get_model("myapp", "SkillProject")
    random.seed(42)
    projects = Project.objects.all()
    skills = Skill.objects.all()
    for project in projects:
        for i in range(random.randint(3, 6)):
            skill = random.choice(skills)
            ProjectSkillsLink.objects.create(Project=project, Skill=skill)
            skills = skills.exclude(SkillID=skill.SkillID)
    print("Skills assigned to projects")


class Migration(migrations.Migration):

    dependencies = [
        ("myapp", "0001_initial"),
    ]

    operations = [
        migrations.RunPython(add_roles),
        migrations.RunPython(add_areas),
        migrations.RunPython(add_course_code),
        migrations.RunPython(add_time_rule),
        migrations.RunPython(create_test_users),
        migrations.RunPython(add_projects),
        migrations.RunPython(add_groups),
        migrations.RunPython(assign_users_to_groups),
        migrations.RunPython(add_group_preferences),
        migrations.RunPython(assign_group_to_projects),
        migrations.RunPython(assign_group_to_projects),
        migrations.RunPython(add_group_score),
        migrations.RunPython(add_skills),
        migrations.RunPython(set_skills_to_projects),
    ]
