# Generated by Django 5.0.6 on 2024-07-09 06:24

from django.db import migrations

# Generated by Django 5.0.6 on 2024-07-07 17:50
import random
import string
from django.contrib.auth.hashers import make_password
from django.db import migrations

def create_test_users(apps, schema_editor):
    User = apps.get_model('myapp', 'User')
    random.seed(42)
    # Create additional students
    for i in range(100):
        email=f"stu{i}@stu.com"
        password = make_password("stu")

        User.objects.create(
            FirstName=f"stu{i}",
            LastName=f"stu{i}",
            EmailAddress=email,
            Passwd=password,
            UserRole=1,
            UserInformation=f"Information for stu{i}"
        )
    print("Test users created successfully.")

def add_groups(apps, schema_editor):
    User = apps.get_model('myapp', 'User')
    Group = apps.get_model('myapp', 'Group')    
    random.seed(42)

    cord = User.objects.get(EmailAddress="cord@cord.com")
    admin = User.objects.get(EmailAddress="admin@admin.com")
    tut = User.objects.get(EmailAddress="tut@tut.com")

    # Creating groups

    group1 = Group.objects.create(GroupName='Group 2', GroupDescription='Description for Group 1', CreatedBy=cord, MaxMemberNumber=6)
    group2 = Group.objects.create(GroupName='Group 3', GroupDescription='Description for Group 2', CreatedBy=admin, MaxMemberNumber=6)
    group3 = Group.objects.create(GroupName='Group 4', GroupDescription='Description for Group 3', CreatedBy=tut, MaxMemberNumber=6)

    group1.save()
    group2.save()
    group3.save()

    # create 10 more groups
    users=User.objects.filter(UserRole=1)
    users_list = list(users)
    for i in range(10):
        random_user = random.choice(users_list)
        users_list.remove(random_user)
        
        group = Group.objects.create(
            GroupName=f"Group {i+3}",
            GroupDescription=f"Description for Group {i+3}",
            CreatedBy=random_user,
            MaxMemberNumber=random.randint(4, 8)
        )
        group.save()


    
def assign_users_to_groups(apps, schema_editor):
    import random
    random.seed(42)

    User = apps.get_model('myapp', 'User')
    Group = apps.get_model('myapp', 'Group')
    GroupUsersLink = apps.get_model('myapp', 'GroupUsersLink')


    users = list(User.objects.filter(UserRole=1))
    existing_groups = list(Group.objects.all())


    for group in [g for g in existing_groups if g.CreatedBy.UserRole == 1]:
        if group.CreatedBy in users:
            GroupUsersLink.objects.create(GroupID=group, UserID=group.CreatedBy)
            users.remove(group.CreatedBy)


    for group in existing_groups:
        max_members = group.MaxMemberNumber
        current_members = GroupUsersLink.objects.filter(GroupID=group).count()


        if group.CreatedBy.UserRole == 1 and group.CreatedBy in users:
            max_members -= 1


        while current_members < max_members and users:
            user = users.pop(0)
            GroupUsersLink.objects.create(GroupID=group, UserID=user)
            current_members += 1

    print("Assignment done")


    



class Migration(migrations.Migration):

    dependencies = [
        ('myapp', '0009_group_maxmembernumber'),
    ]

    operations = [
        migrations.RunPython(create_test_users),
        migrations.RunPython(add_groups),
        migrations.RunPython(assign_users_to_groups),
    ]
    
